stages:
  - test
  - deploy

test:
  type: test
  script:
  # - export DATABASE_URL=sqlite://atlas-api-db.sqlite3
    - apt-get update -qy
    - apt-get install -y python-dev python-pip
    - pip install -r requirements.txt
    - python manage.py test -v 2

stage deployment:
  type: deploy
  before_script:
    - echo "deb http://toolbelt.heroku.com/ubuntu ./" > /etc/apt/sources.list.d/heroku.list
    - wget -O- https://toolbelt.heroku.com/apt/release.key | apt-key add -
    - apt-get update
    - apt-get install -y heroku-toolbelt
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    - dpl --provider=heroku --app=$HEROKU_DEV_APP --api-key=$HEROKU_API_KEY
    - heroku run python manage.py migrate --exit-code --app $HEROKU_DEV_APP
    # From: http://stackoverflow.com/questions/37514755/gitlab-ci-deploy-to-heroku-and-run-migrations
    # NOTE: Use the second answer instead, install heroku cli
    # - "curl -n -X POST https://api.heroku.com/apps/$HEROKU_STAGING_APP_NAME/ps -H \"Accept: application/json\" -H \"Authorization: Bearer ${HEROKU_API_KEY}\" -d \"command=bundle exec rails db:migrate\""
    # - "curl -n -X POST https://api.heroku.com/apps/$HEROKU_DEV_APP/ps -H \"Accept: application/json\" -H \"Authorization: Bearer ${HEROKU_API_KEY}\" -d \"command=python manage.py migrate\""

  only:
  - master

# This job is responsible for patching the hotfix (production copy) environment
hotfix patch:
  type: deploy
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    - dpl --provider=heroku --app=$HEROKU_HOTFIX_APP --api-key=$HEROKU_API_KEY
  only:
  - hotfix

# TODO: READ >> https://gitlab.com/help/ci/yaml/README.md#environment
