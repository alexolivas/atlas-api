# This is a sample build configuration for Python.
# Check our guides at https://confluence.atlassian.com/x/x4UWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: python:3.7

clone:
  depth: full
pipelines:
  default:
    - step:
        deployment: test
        caches:
          - pip
        script:
          - pip install -r requirements.txt
          - python manage.py test -v 2
        services:
          - postgres

  branches:
    master:
      - step:
          name: Deploy to production
          deployment: production
          caches:
            - pip
          script:
            - curl https://cli-assets.heroku.com/install.sh | sh
            - pip install -r requirements.txt
            - python manage.py test -v 2
            # Create a tag for this release (NOTE I need to figure out how to generate a token)
            #- git remote set-url origin https://x-token-auth:${BITBUCKET_TOKEN}@bitbucket.org/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}.git
            #- git tag -a "$(python -c 'import atlas; print(atlas.VERSION)')"
            #- git push origin --tags
            # Deploy to stage so it has the latest build, then promote it to production so they're in sync
            - git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_STAGE_APP_NAME.git HEAD:master
            - heroku authorizations:create
            - heroku pipelines:promote -a $HEROKU_STAGE_APP_NAME
          services:
            - postgres
    release/*:
      - step:
          name: Deploy to Stage RC
          deployment: staging
          caches:
            - pip
          script:
            - curl https://cli-assets.heroku.com/install.sh | sh
            - pip install -r requirements.txt
            - python manage.py test -v 2
            - git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_STAGE_APP_NAME.git HEAD:master
            - heroku authorizations:create
            - heroku run -a $HEROKU_STAGE_APP_NAME python restore_db.py
          services:
            - postgres
    develop:
      - step:
          deployment: test
          caches:
            - pip
          script:
            - curl https://cli-assets.heroku.com/install.sh | sh
            - pip install -r requirements.txt
            - python manage.py test -v 2
            - git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_DEV_APP_NAME.git HEAD:master
            - heroku authorizations:create
            - heroku run -a $HEROKU_DEV_APP_NAME python restore_db.py
          services:
            - postgres

definitions:
  services:
    postgres:
      image: postgres
      environment:
        POSTGRES_DB: atlas_pipeline_db
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_user_password
